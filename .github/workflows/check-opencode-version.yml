name: Check and Update OpenCode

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Specific version to update to (optional)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      has-new-version: ${{ steps.version-check.outputs.has-new-version }}
      current-version: ${{ steps.version-check.outputs.current-version }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for new OpenCode version
        id: version-check
        run: |
          # Get current version from flake.nix
          CURRENT_VERSION=$(grep -o 'opencodeVersion = "[^"]*"' flake.nix | sed 's/opencodeVersion = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Use manual input version if provided, otherwise get latest from npm
          if [ -n "${{ github.event.inputs.version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $LATEST_VERSION"
          else
            LATEST_VERSION=$(curl -s https://registry.npmjs.org/opencode-ai | jq -r '.["dist-tags"].latest')
            echo "Latest version from npm: $LATEST_VERSION"
          fi
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has-new-version=true" >> $GITHUB_OUTPUT
          else
            echo "Already at latest version: $CURRENT_VERSION"
            echo "has-new-version=false" >> $GITHUB_OUTPUT
          fi

  update-and-release:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.has-new-version == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          
      - name: Set up Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create update branch
        id: create-branch
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.latest-version }}"
          BRANCH_NAME="update-opencode-${NEW_VERSION}-$(date +%s)"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
      - name: Update OpenCode version
        run: |
          chmod +x ./update-version.sh
          ./update-version.sh "${{ needs.check-version.outputs.latest-version }}"
          
      - name: Commit changes to branch
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.latest-version }}"
          git add flake.nix package.nix
          git commit -m "Update OpenCode to version $NEW_VERSION"
          
      - name: Create tag on branch
        run: |
          chmod +x ./tag-version.sh
          ./tag-version.sh
          
      - name: Merge branch to master
        id: merge-branch
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.branch-name }}"
          echo "Switching to master and merging $BRANCH_NAME"
          
          # Switch to master and ensure it's up to date
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}
          
          # Attempt fast-forward merge
          if git merge "$BRANCH_NAME" --ff-only; then
            echo "Successfully merged $BRANCH_NAME to master"
            echo "merge-success=true" >> $GITHUB_OUTPUT
          else
            echo "Fast-forward merge failed. Master may have changed during update."
            echo "merge-success=false" >> $GITHUB_OUTPUT
            echo "This could happen if:"
            echo "1. Another workflow updated master during this run"
            echo "2. Manual commits were made to master"
            echo "The update branch $BRANCH_NAME contains the changes and can be manually reviewed."
            exit 1
          fi
          
      - name: Handle merge failure
        if: failure() && steps.merge-branch.outputs.merge-success == 'false'
        run: |
          echo "Merge failed - the update was successful but couldn't be automatically merged."
          echo "Branch ${{ steps.create-branch.outputs.branch-name }} contains the updates."
          echo "Manual intervention may be required to resolve conflicts."
          
      - name: Push changes and tags
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.latest-version }}"
          echo "Pushing master and tags"
          git push origin ${{ github.ref_name }}
          git push origin "v$NEW_VERSION"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.latest-version }}
          name: OpenCode Flake ${{ needs.check-version.outputs.latest-version }}
          body: |
            OpenCode Flake version ${{ needs.check-version.outputs.latest-version }}
            
            This release packages [OpenCode](https://github.com/sst/opencode) v${{ needs.check-version.outputs.latest-version }} as a Nix flake.
            
            ## Installation
            
            ```bash
            # Run OpenCode directly
            nix run github:AodhanHayter/opencode-flake
            
            # Or install to your profile
            nix profile install github:AodhanHayter/opencode-flake
            ```
            
            ## Using in a flake
            
            ```nix
            {
              inputs.opencode-flake.url = "github:AodhanHayter/opencode-flake";
              
              outputs = { self, nixpkgs, opencode-flake, ... }: {
                # Use in your outputs
                packages.x86_64-linux.opencode = opencode-flake.packages.x86_64-linux.default;
              };
            }
            ```
          draft: false
          prerelease: false
          
      - name: Cleanup update branch
        if: always()
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.branch-name }}"
          if [ -n "$BRANCH_NAME" ]; then
            echo "Cleaning up branch: $BRANCH_NAME"
            # Ensure we're on master before deleting branch
            git checkout ${{ github.ref_name }} 2>/dev/null || true
            # Delete the update branch
            git branch -D "$BRANCH_NAME" 2>/dev/null || echo "Branch $BRANCH_NAME already deleted or doesn't exist"
          fi